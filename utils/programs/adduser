#!/usr/bin/env bash
# User creation utility for MassOS.
# Copyright (C) 2021-2024 Daniel Massey / MassOS Developers.

if test $EUID -ne 0; then
  echo "Error: $(basename "$0") must be run as root." >&2
  exit 1
fi

# Check if the username was supplied as an argument.
if test ! -z "$1"; then
  username_input="$1"
fi

# Ask the user for the full name.
read -rp "Enter the full name of the new user: " fullname

# Enter a loop until an acceptable username is given or determinable by us.
while test -z "$username_input"; do
  # Ask the user for the username because it wasn't given as an argument.
  read -rp "Enter the username of the new user: " username_input
  if test -z "$fullname" && test -z "$username_input"; then
    # Full name can be empty, but username must not be.
    echo "Username must not be empty."
  elif test -z "$username_input"; then
    # Username is empty, so set it to the full name was.
    username_input="$fullname"
  fi
done

# Filter the username so it is a single word and converted to lowercase.
username="$(echo "$username_input" | head -n1 | cut -d' ' -f1 | tr '[:upper:]' '[:lower:]')"

# If the full name was not specified, it will be set to the username.
if test -z "$fullname"; then
  fullname="$username"
fi

# Ask the user for their preferred login shell.
read -rp "Login shell (leave blank for default (/bin/bash)): " shell

# Fallback to bash is the user did not specify a shell.
if test -z "$shell"; then
  shell=/bin/bash
fi

# Emit a warning if the specified shell is not valid, and fallback to bash.
if test ! -x "$shell"; then
  echo "WARNING: $shell is not a valid shell. Falling back to '/bin/bash'." >&2
  shell=/bin/bash
fi

# Tell the user about admin and ask them if they want the user to be an admin.
echo "Admin users are part of the 'wheel' group and can elevate to 'root'."
read -rp "Should $username be an admin user on the system? [Y/n] " adminsel_input

# Convert the input to lowercase.
adminsel=$(echo "$adminsel_input" | tr '[:upper:]' '[:lower:]')

# Assume YES unless the user specified otherwise.
if test "$adminsel" = n || test "$adminsel" = no; then
  admin="NO"
else
  admin="YES"
fi

# Final warning.
echo "Your user will be configured with the following settings:

Full name: $fullname
Username: $username
Login shell: $shell
Admin: $admin
"
read -rp "Press Enter to continue or CTRL+C to abort: "

if test "$admin" = "NO"; then
  # Create the user without any additional groups.
  useradd -c "$fullname" -ms "$shell" "$username"
  if test $? -ne 0; then
    # Something went very wrong.
    echo "Error creating user. Exiting..." >&2
    exit 1
  fi
else
  # Create the user with the relevant group(s) for admin.
  useradd -c "$fullname" -G wheel -ms "$shell" "$username"
  if test $? -ne 0; then
    # Something went very wrong.
    echo "Error creating user. Exiting..." >&2
    exit 1
  fi
fi

# Enter a loop for setting the password, so we can retry if it fails.
while true; do
  passwd "$username"
  test $? -eq 0 || continue
  break
done

# Ensure only the user has access to their home directory.
chmod 0700 /home/"$username"

# Finishing message.
echo "User $username created successfully."
echo "To add $username to extra groups, run 'usermod -aG <group> $username'."
