From 7192ff481bc46a257f44fb5625cbe97361cac140 Mon Sep 17 00:00:00 2001
From: Benjamin Berg <bberg@redhat.com>
Date: Fri, 25 Feb 2022 10:08:19 +0100
Subject: [PATCH] linux: Set FD to -1 rather than 0 when closing delay
 inhibitor

---
 src/linux/up-backend.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/linux/up-backend.c b/src/linux/up-backend.c
index e24e473..f46a88d 100644
--- a/src/linux/up-backend.c
+++ b/src/linux/up-backend.c
@@ -746,9 +746,9 @@ up_backend_prepare_for_sleep (GDBusConnection *connection,
 
 	if (will_sleep) {
 		up_daemon_pause_poll (backend->priv->daemon);
-		if (backend->priv->logind_delay_inhibitor_fd > 0) {
+		if (backend->priv->logind_delay_inhibitor_fd >= 0) {
 			close (backend->priv->logind_delay_inhibitor_fd);
-			backend->priv->logind_delay_inhibitor_fd = 0;
+			backend->priv->logind_delay_inhibitor_fd = -1;
 		}
 		return;
 	}
-- 
GitLab

From 72469426b737f1398651efc360f62a86e3b2633b Mon Sep 17 00:00:00 2001
From: Benjamin Berg <bberg@redhat.com>
Date: Fri, 25 Feb 2022 10:09:17 +0100
Subject: [PATCH] input: Fix FD handling and let input stream close it

The open() call needs to check against the FD being <0 for error
detection. Also, add a missing close in one of the error paths and
change the code to let the input stream close the FD when it is not
needed anymore.

We still open() it manually just because we need to do an ioctl once.
---
 src/linux/up-input.c | 18 ++++++++----------
 1 file changed, 8 insertions(+), 10 deletions(-)

diff --git a/src/linux/up-input.c b/src/linux/up-input.c
index ccd42c7..db96a9e 100644
--- a/src/linux/up-input.c
+++ b/src/linux/up-input.c
@@ -37,7 +37,6 @@ struct _UpInput
 
 	guint			 watched_switch;
 	int			 last_switch_state;
-	int			 eventfp;
 	struct input_event	 event;
 	gsize			 offset;
 	GIOChannel		*channel;
@@ -192,6 +191,7 @@ up_input_coldplug (UpInput *input, GUdevDevice *d)
 	glong bitmask[NBITS(SW_MAX)];
 	gint num_bits;
 	GIOStatus status;
+	int eventfd;
 
 	/* get sysfs path */
 	native_path = up_input_get_device_sysfs_path (d);
@@ -243,23 +243,25 @@ up_input_coldplug (UpInput *input, GUdevDevice *d)
 	}
 
 	/* open device file */
-	input->eventfp = open (device_file, O_RDONLY | O_NONBLOCK);
-	if (input->eventfp <= 0) {
+	eventfd = open (device_file, O_RDONLY | O_NONBLOCK);
+	if (eventfd < 0) {
 		g_warning ("cannot open '%s': %s", device_file, strerror (errno));
 		ret = FALSE;
 		goto out;
 	}
 
 	/* get initial state */
-	if (ioctl (input->eventfp, EVIOCGSW(sizeof (bitmask)), bitmask) < 0) {
+	if (ioctl (eventfd, EVIOCGSW(sizeof (bitmask)), bitmask) < 0) {
 		g_warning ("ioctl EVIOCGSW on %s failed", native_path);
+		close(eventfd);
 		ret = FALSE;
 		goto out;
 	}
 
 	/* create channel */
-	g_debug ("watching %s (%i)", device_file, input->eventfp);
-	input->channel = g_io_channel_unix_new (input->eventfp);
+	g_debug ("watching %s (%i)", device_file, eventfd);
+	input->channel = g_io_channel_unix_new (eventfd);
+	g_io_channel_set_close_on_unref (input->channel, TRUE);
 
 	/* set binary encoding */
 	status = g_io_channel_set_encoding (input->channel, NULL, &error);
@@ -290,7 +292,6 @@ out:
 static void
 up_input_init (UpInput *input)
 {
-	input->eventfp = -1;
 	input->last_switch_state = -1;
 }
 
@@ -309,11 +310,8 @@ up_input_finalize (GObject *object)
 
 	if (input->channel) {
 		g_io_channel_shutdown (input->channel, FALSE, NULL);
-		input->eventfp = -1;
 		g_io_channel_unref (input->channel);
 	}
-	if (input->eventfp >= 0)
-		close (input->eventfp);
 	G_OBJECT_CLASS (up_input_parent_class)->finalize (object);
 }
 
-- 
GitLab

From 2f81d690148cd80909083e0390ba50fb1e431b39 Mon Sep 17 00:00:00 2001
From: Benjamin Berg <bberg@redhat.com>
Date: Fri, 25 Feb 2022 10:11:01 +0100
Subject: [PATCH] daemon: Initialize FD to -1 to avoid incorrect close

Also add an assert that the FD is -1 when we are about to grab the
inhibitor. Previously, we would just set the value early enough before
trying to close the FD, overwriting the incorrect initialization.
---
 src/up-daemon.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/up-daemon.c b/src/up-daemon.c
index da72ffe..738af99 100644
--- a/src/up-daemon.c
+++ b/src/up-daemon.c
@@ -616,6 +616,8 @@ up_daemon_set_warning_level (UpDaemon *daemon, UpDeviceLevel warning_level)
 
 	if (warning_level == UP_DEVICE_LEVEL_ACTION) {
 		if (daemon->priv->action_timeout_id == 0) {
+			g_assert (daemon->priv->critical_action_lock_fd == -1);
+
 			g_debug ("About to take action in %d seconds", UP_DAEMON_ACTION_DELAY);
 			daemon->priv->critical_action_lock_fd = up_backend_inhibitor_lock_take (daemon->priv->backend, "Execute critical action", "block");
 			daemon->priv->action_timeout_id = g_timeout_add_seconds (UP_DAEMON_ACTION_DELAY,
@@ -1120,6 +1122,8 @@ static void
 up_daemon_init (UpDaemon *daemon)
 {
 	daemon->priv = up_daemon_get_instance_private (daemon);
+
+	daemon->priv->critical_action_lock_fd = -1;
 	daemon->priv->config = up_config_new ();
 	daemon->priv->power_devices = up_device_list_new ();
 	daemon->priv->display_device = up_device_new ();
-- 
GitLab

